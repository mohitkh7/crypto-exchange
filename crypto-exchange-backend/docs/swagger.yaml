openapi: 3.0.0
info:
  title: Crypto Exchange API
  version: 1.0.0
  description: |
    API documentation for the cryptocurrency exchange platform
    
    ## WebSocket Endpoint
    
    The platform also provides a WebSocket endpoint for real-time notifications:
    
    ```
    ws://localhost:4000
    ```
    
    ### WebSocket Message Format
    
    The WebSocket server accepts messages in the following format:
    
    ```json
    {
      "hash": "0x8f11dabb53f45a3f894d7b534d204c1e1b2188355492cf49dcf757d998d5e287",
      "transfer": "67f0d8f2215ab1fe84f22ce71bec2419",
      "coin": "hteth",
      "type": "transfer",
      "state": "confirmed",
      "wallet": "67adc2acebc3a6f92625ca6e8035beee",
      "walletType": "hot",
      "transferType": "receive",
      "baseValue": 1000000000000000000,
      "baseValueString": "1000000000000000000",
      "value": 1000000000000000000,
      "valueString": "1000000000000000000",
      "feeString": "21457842000",
      "initiator": ["external"],
      "receiver": "0xb868113b246c65514ee5010b323e47970d6dcb27"
    }
    ```
    
    When a deposit is received, the system will:
    1. Check if the message is a transfer and is confirmed
    2. If transferType is "receive", look for the receiver address
    3. Find the user with the matching deposit address
    4. Update the user's balance for the corresponding asset
    5. Create a new transaction record of type "deposit"

servers:
  - url: http://localhost:4000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
            status:
              type: integer

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        fiat_balance:
          type: number
          format: float
        created_at:
          type: string
          format: date-time

    CryptoAsset:
      type: object
      properties:
        crypto_type:
          type: string
        amount:
          type: number
          format: float
        deposit_address:
          type: string

    Transaction:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [buy, sell, withdraw]
        crypto_type:
          type: string
        amount:
          type: number
          format: float
        price:
          type: number
          format: float
        status:
          type: string
          enum: [pending, completed, failed]
        created_at:
          type: string
          format: date-time

    Wallet:
      type: object
      properties:
        id:
          type: string
        asset:
          type: string
        walletId:
          type: string
        label:
          type: string
        type:
          type: string
          enum: [hot, cold]
        multisigType:
          type: string
          enum: [tss]
        multisigTypeVersion:
          type: string
          enum: [MPCv2]
        receiveAddress:
          type: string
        balance:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'

  /users/profile:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
    put:
      summary: Update user profile
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'

  /users/balance:
    get:
      summary: Get user's fiat balance
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's fiat balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      balance:
                        type: number
                        format: float

  /crypto/balance:
    get:
      summary: Get user's crypto balance
      tags: [Crypto]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's crypto balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      assets:
                        type: array
                        items:
                          $ref: '#/components/schemas/CryptoAsset'

  /crypto/transactions:
    get:
      summary: Get user's transaction history
      tags: [Crypto]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's transaction history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transaction'

  /crypto/buy:
    post:
      summary: Buy cryptocurrency
      tags: [Crypto]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cryptoType
                - amount
              properties:
                cryptoType:
                  type: string
                amount:
                  type: number
                  format: float
                  minimum: 0.00000001
      responses:
        '200':
          description: Purchase successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      amount:
                        type: number
                      price:
                        type: number
                      totalCost:
                        type: number

  /crypto/sell:
    post:
      summary: Sell cryptocurrency
      tags: [Crypto]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cryptoType
                - amount
              properties:
                cryptoType:
                  type: string
                amount:
                  type: number
                  format: float
                  minimum: 0.00000001
      responses:
        '200':
          description: Sale successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      amount:
                        type: number
                      price:
                        type: number
                      totalValue:
                        type: number

  /crypto/deposit-address/{cryptoType}:
    get:
      summary: Get deposit address for a specific cryptocurrency
      tags: [Crypto]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: cryptoType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deposit address generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      depositAddress:
                        type: string

  /crypto/withdraw:
    post:
      summary: Withdraw cryptocurrency
      tags: [Crypto]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cryptoType
                - amount
                - address
              properties:
                cryptoType:
                  type: string
                amount:
                  type: number
                  format: float
                  minimum: 0.00000001
                address:
                  type: string
      responses:
        '200':
          description: Withdrawal initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      amount:
                        type: number
                      address:
                        type: string

  /admin/wallet:
    post:
      summary: Create a new wallet
      tags: [Admin]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - asset
                - label
                - walletId
              properties:
                asset:
                  type: string
                  enum: [eth, btc, usd]
                label:
                  type: string
                walletId:
                  type: string
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      wallet:
                        $ref: '#/components/schemas/Wallet'

  /admin/wallet/{asset}:
    get:
      summary: Get wallet details for a specific asset
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: asset
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      wallet:
                        $ref: '#/components/schemas/Wallet'

  /admin/wallets:
    get:
      summary: Get all wallets
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: All wallets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      wallets:
                        type: array
                        items:
                          $ref: '#/components/schemas/Wallet'
